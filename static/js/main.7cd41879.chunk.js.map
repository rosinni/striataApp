{"version":3,"sources":["components/Header.js","components/ImagenAvatar.js","components/Parrafo.js","components/Section.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","ImagenAvatar","props","src","imgUrl","Parrafo","texto","Section","info","date","Footer","App","state","Date","this","timerID","setInterval","tictac","clearInterval","setState","toLocaleTimeString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAWeA,EARA,WAEX,OAAS,4BAAQC,UAAU,UACnB,yCCAGC,EAJM,SAACC,GAClB,OAAS,yBAAKC,IAAKD,EAAME,OAAQJ,UAAU,cCIhCK,EAJC,SAACH,GACb,OAAS,2BAAIA,EAAMI,QCeRC,EAdC,SAACL,GACb,IAAMM,EACG,2FADHA,EAEO,yNAGb,OAAQ,6BAASR,UAAU,WACf,2BAAIE,EAAMO,MACV,6HACD,kBAAC,EAAD,CAASH,MAAOE,IACf,kBAAC,EAAD,CAAcJ,OAAQI,MCPvBE,EANA,WACX,OAAS,4BAAQV,UAAU,OACf,8DCiCDW,E,kDA9Bb,WAAYT,GAAO,IAAD,8BAChB,cAAMA,IACDU,MAAQ,CAACH,KAAM,IAAII,MAFR,E,gEAKE,IAAD,OACjBC,KAAKC,QAAUC,aAAY,kBAAI,EAAKC,WAAS,O,6CAI7CC,cAAcJ,KAAKC,W,+BAKnBD,KAAKK,SAAS,CACZV,KAAM,IAAII,S,+BAKZ,OAAQ,yBAAKb,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASS,KAAMK,KAAKF,MAAMH,KAAKW,uBAC/B,kBAAC,EAAD,W,GAzBMC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7cd41879.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n\r\n    return ( <header className=\"header\">\r\n            <h1>Striata</h1>\r\n          </header>\r\n    );\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\n\r\nconst ImagenAvatar = (props) => {\r\n    return ( <img src={props.imgUrl} className=\"imgReact\"/>);\r\n}\r\n \r\nexport default ImagenAvatar;","import React from 'react';\r\n\r\n\r\nconst Parrafo = (props) => {\r\n    return ( <p>{props.texto}</p> );\r\n}\r\n \r\nexport default Parrafo;","import React from 'react';\r\nimport ImagenAvatar from './ImagenAvatar'\r\nimport Parrafo from './Parrafo'\r\n\r\n\r\nconst Section = (props) => {\r\n    const info = {\r\n        url: \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/React.svg/1200px-React.svg.png\",\r\n        parrafo: \"React crea componentes , que son elementos HTML personalizados y reutilizables, para crear interfaces de usuario de manera rápida y eficiente. Además optimiza la forma en que se almacenan y manejan los datos.\"\r\n            };\r\n\r\n    return (<section className=\"section\">\r\n                <p>{props.date}</p>\r\n                <p>React, Es una librería de Javascript para crear interfaces de usuario (UI) en el front-end.</p>\r\n               <Parrafo texto={info.parrafo}/>\r\n                <ImagenAvatar imgUrl={info.url} />\r\n            </section>);\r\n}\r\n \r\nexport default Section;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return ( <footer className=\"foo\">\r\n                <p>Todos los derechos reservados</p>\r\n            </footer> );\r\n}\r\n \r\nexport default Footer;","import React from 'react';\nimport Header from './components/Header'\nimport Section from './components/Section'\nimport Footer from './components/Footer'\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {date: new Date()}\n\n  }\n  componentDidMount(){\n    this.timerID = setInterval(()=>this.tictac(),1000);\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.timerID);\n  }\n\n\n  tictac(){\n    this.setState({\n      date: new Date()\n    })\n  }\n\n  render(){\n    return (<div className=\"App\">\n            <Header/>\n            <Section date={this.state.date.toLocaleTimeString()}/>\n            <Footer/>\n          </div>\n        );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}